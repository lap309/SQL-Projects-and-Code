#Checking/Cleaning the data

select * from fundraisers where project_name is null;
select * from fundraisers where sub_category_id is null;
select * from fundraisers where goal is null;
select * from fundraisers where donors is null;

### Filtering for all campaigns for games with category and subcategory
select fund.project_name, fund.launch_date, fund.deadline, fund.goal, fund.amt_pledged, fund.donors, fund.campaign_status, subc.project_name as sub_cat, cat.project_name as category
from fundraisers fund
left join sub_category subc on fund.sub_category_id = subc.id
left join category cat on subc.id = cat.id
where ((cat.project_name like '%game%') or (subc.project_name like '%game%')) and campaign_status!='live';

select project_name from sub_category where project_name like '%game%';

#List of all possible statuses for a campaign/fundraiser
select distinct(campaign_status) from fundraisers;

##Checking datetime range
select min(launch_date) from fundraisers
union
select max(deadline) from fundraisers;

#All data/fundraising campaign_status stats
Select campaign_status, count(campaign_status) as campaign_status_n, (100*count(campaign_status))/15000 as campaign_status_percent, round(avg(goal),2) as avg_set_goal from fundraisers
where campaign_status in ('failed', 'canceled','suspended')
union
select campaign_status, count(campaign_status) as campaign_status_n,(100*count(campaign_status))/15000 as campaign_status_percent, round(avg(goal), 2) as avg_set_goal from fundraisers
where campaign_status in ('successful');

#Number of gaming fundraisers (1290, excluding currently live fundraisers)
select count(fund.project_name)
from fundraisers fund
left join sub_category subc on fund.sub_category_id = subc.id
left join category cat on subc.id = cat.id
where ((cat.project_name like '%game%') or (subc.project_name like '%game%')) and (fund.campaign_status!='live');

# Gaming Fundraisers: descriptive stats for failed and successful fundraising fundraisers

select campaign_status as Gaming_campaign_status, count(campaign_status),(100*count(campaign_status))/1298 as count_percentage, min(goal) as min_goal, round(avg(goal),2) as avg_goal, max(goal) as max_goal, round(avg(amt_pledged),2) as avg_amt_pledged, floor(avg(donors)) as avg_donors from
(select fund.project_name, fund.launch_date, fund.deadline, fund.goal, fund.amt_pledged, fund.donors, fund.campaign_status, subc.project_name as sub_cat, cat.project_name as category 
from fundraisers fund
left join sub_category subc on fund.sub_category_id = subc.id
left join category cat on subc.id = cat.id
where (cat.project_name like '%game%') or subc.project_name like '%game%') as temp1
where campaign_status = 'successful'
group by campaign_status
union
select campaign_status, count(campaign_status), (100*count(campaign_status))/1298 as count_percentage, min(goal) as min_goal, round(avg(goal),2) as avg_goal, max(goal) as max_goal, round(avg(amt_pledged),2) as avg_amt_pledged, floor(avg(donors)) as avg_donors
from (select fund.project_name, fund.launch_date, fund.deadline, fund.goal, fund.amt_pledged, fund.donors, fund.campaign_status, subc.project_name as sub_cat, cat.project_name as category 
from fundraisers fund
left join sub_category subc on fund.sub_category_id = subc.id
left join category cat on subc.id = cat.id
where (cat.project_name like '%game%') or subc.project_name like '%game%') as temp2
where campaign_status in ('failed', 'canceled','suspended');


# Conduct GOAL means of difference hypothesis test for Gaming fundraisers
select campaign_status, count(goal) as n, 1/(count(goal)) as one_over_n, avg(goal) as x, (std(goal)* std(goal)) as varaince from
(select fund.project_name, fund.launch_date, fund.deadline, fund.goal, fund.amt_pledged, fund.donors, fund.campaign_status, subc.project_name as sub_cat, cat.project_name as category 
from fundraisers fund
left join sub_category subc on fund.sub_category_id = subc.id
left join category cat on subc.id = cat.id
where (cat.project_name like '%game%') or subc.project_name like '%game%') as temp1
where campaign_status = 'successful'
group by campaign_status
union
select campaign_status, count(goal) as n, 1/(count(goal)) as one_over_n, avg(goal) as x, (std(goal)* std(goal)) as variance 
from (select fund.project_name, fund.launch_date, fund.deadline, fund.goal, fund.amt_pledged, fund.donors, fund.campaign_status, subc.project_name as sub_cat, cat.project_name as category 
from fundraisers fund
left join sub_category subc on fund.sub_category_id = subc.id
left join category cat on subc.id = cat.id
where (cat.project_name like '%game%') or subc.project_name like '%game%') as temp2
where campaign_status in ('failed', 'canceled','suspended');



##Budget for Board Games Specifically, all campaign_statuss
select round(avg(goal), 2) as avg_goal, round(avg(amt_pledged), 2) as avg_amt_pledged,floor(avg(donors)) as avg_donors
from 
(select fund.project_name, fund.launch_date, fund.deadline, fund.goal, fund.amt_pledged, fund.donors, fund.campaign_status, subc.project_name as sub_cat, cat.project_name as category 
from fundraisers fund
left join sub_category subc on fund.sub_category_id = subc.id
left join category cat on subc.id = cat.id
where (subc.project_name ='Tabletop Games') and fund.campaign_status!='living') as temp1;

## find the total number of Tabletop board games
select count(*) from fundraisers fund
left join sub_category subc on fund.sub_category_id = subc.id
where subc.project_name='Tabletop Games';

# Table top Gaming Fundraising: descriptive stats grouped by failed and successful fundraisers
select campaign_status as Gaming_campaign_status, count(campaign_status),(100*count(campaign_status))/553 as count_percentage, min(goal) as min_goal, round(avg(goal),2) as avg_goal, max(goal) as max_goal, round(avg(amt_pledged),2) as avg_amt_pledged, floor(avg(donors)) as avg_donors from
(select fund.project_name, fund.launch_date, fund.deadline, fund.goal, fund.amt_pledged, fund.donors, fund.campaign_status, subc.project_name as sub_cat, cat.project_name as category 
from fundraisers fund
left join sub_category subc on fund.sub_category_id = subc.id
left join category cat on subc.id = cat.id
where subc.project_name='Tabletop Games') as temp1
where campaign_status = 'successful'
group by campaign_status
union
select campaign_status, count(campaign_status), (100*count(campaign_status))/553 as count_percentage, min(goal) as min_goal, round(avg(goal),2) as avg_goal, max(goal) as max_goal, round(avg(amt_pledged),2) as avg_amt_pledged, floor(avg(donors)) as avg_donors
from (select fund.project_name, fund.launch_date, fund.deadline, fund.goal, fund.amt_pledged, fund.donors, fund.campaign_status, subc.project_name as sub_cat, cat.project_name as category
from fundraisers fund
left join sub_category subc on fund.sub_category_id = subc.id
left join category cat on subc.id = cat.id
where subc.project_name='Tabletop Games') as temp2
where campaign_status in ('failed', 'canceled','suspended');

##Does goal amount affect the number of donors? Board Games
select goal, floor(avg(donors)) as avg_backer
from (select fund.project_name, fund.launch_date, fund.deadline, fund.goal, fund.amt_pledged, fund.donors, fund.campaign_status, subc.project_name as sub_cat, cat.project_name as category 
from fundraisers fund
left join sub_category subc on fund.sub_category_id = subc.id
left join category cat on subc.id = cat.id
where (subc.project_name ='Tabletop Games') and fund.campaign_status!='live' ) as temp1
group by goal
order by goal;


##Analyzing the realtionship/correlation between the goal amount and the number of donors for ALL GAMING fundraisers
select goal, floor(avg(donors)) as avg_backer
from (select fund.project_name, fund.launch_date, fund.deadline, fund.goal, fund.amt_pledged, fund.donors, fund.campaign_status, subc.project_name as sub_cat, cat.project_name as category 
from fundraisers fund
left join sub_category subc on fund.sub_category_id = subc.id
left join category cat on subc.id = cat.id
where ((cat.project_name like '%game%') or (subc.project_name like '%game%'))and fund.campaign_status!='live') as temp1
group by goal
order by goal;

##Correlation between goal amount and number of donors >> results is .255
select (avg(goal * donors) - avg(goal) * avg(donors)) / 
        (sqrt(avg(goal * goal) - avg(goal) * avg(goal)) * sqrt(avg(donors * donors) - avg(donors) * avg(donors)))
        as corr_coef
from (select fund.project_name, fund.launch_date, fund.deadline, fund.goal, fund.amt_pledged, fund.donors, fund.campaign_status, subc.project_name as sub_cat, cat.project_name as category 
from fundraisers fund
left join sub_category subc on fund.sub_category_id = subc.id
left join category cat on subc.id = cat.id
where (subc.project_name ='Tabletop Games') and fund.campaign_status!='live') as temp1;


##Analyzing the realtionship/correlation between the goal amount and the number of donors for ALL GAMING fundraisers
select datediff(deadline, launch_date) as days, round(avg(goal), 2) as avg_goal, round(avg(amt_pledged), 2) as avg_amt_pledged, floor(avg(donors)) as avg_donors
from 
(select fund.project_name, fund.launch_date, fund.deadline, fund.goal, fund.amt_pledged, fund.donors, fund.campaign_status, subc.project_name as sub_cat, cat.project_name as category 
from fundraisers fund
left join sub_category subc on fund.sub_category_id = subc.id
left join category cat on subc.id = cat.id
where ((cat.project_name like '%game%') or (subc.project_name like '%game%'))and fund.campaign_status!='live') as temp1
group by days
order by days;


##Taking days of fundraising into consideration for only SUCCESSFUL GAMING fundraiser
select datediff(deadline, launch_date) as days, round(avg(goal), 2) as avg_goal, round(avg(amt_pledged), 2) as avg_amt_pledged, floor(avg(donors)) as avg_donors
from 
(select fund.project_name, fund.launch_date, fund.deadline, fund.goal, fund.amt_pledged, fund.donors, fund.campaign_status, subc.project_name as sub_cat, cat.project_name as category 
from fundraisers fund
left join sub_category subc on fund.sub_category_id = subc.id
left join category cat on subc.id = cat.id
where ((cat.project_name like '%game%') or (subc.project_name like '%game%'))and fund.campaign_status!='live') as temp1
where campaign_status = 'successful'
group by days
order by days;

##Taking days of fundraising into consideration for ALL TABLETOP Games
select datediff(deadline, launch_date) as days, round(avg(goal), 2) as avg_goal, round(avg(amt_pledged), 2) as avg_amt_pledged, floor(avg(donors)) as avg_donors
from 
(select fund.project_name, fund.launch_date, fund.deadline, fund.goal, fund.amt_pledged, fund.donors, fund.campaign_status, subc.project_name as sub_cat, cat.project_name as category 
from fundraisers fund
left join sub_category subc on fund.sub_category_id = subc.id
left join category cat on subc.id = cat.id
where (subc.project_name = 'Tabletop Games') and fund.campaign_status!='live') as temp1
group by days
order by days;


##Taking days of fundraising into consideration for all successful TABLETOP Games
select datediff(deadline, launch_date) as days, round(avg(goal), 2) as avg_goal, round(avg(amt_pledged), 2) as avg_amt_pledged, floor(avg(donors)) as avg_donors
from 
(select fund.project_name, fund.launch_date, fund.deadline, fund.goal, fund.amt_pledged, fund.donors, fund.campaign_status, subc.project_name as sub_cat, cat.project_name as category 
from fundraisers fund
left join sub_category subc on fund.sub_category_id = subc.id
left join category cat on subc.id = cat.id
where (subc.project_name = 'Tabletop Games') and fund.campaign_status!='live') as temp1
where campaign_status = 'successful'
group by days
order by days;

##Correlation Coefficient for fundraiser length and donors >> results -.04
select (avg(days * donors) - avg(days) * avg(donors)) / 
        (sqrt(avg(days * days) - avg(days) * avg(days)) * sqrt(avg(donors * donors) - avg(donors) * avg(donors)))
        as corr_coef
from (select datediff(deadline,launch_date) as days, fund.project_name, fund.launch_date, fund.deadline, fund.goal, fund.amt_pledged, fund.donors, fund.campaign_status, subc.project_name as sub_cat, cat.project_name as category from fundraisers fund
left join sub_category subc on fund.sub_category_id = subc.id
left join category cat on subc.id = cat.id
where (subc.project_name ='Tabletop Games') and fund.campaign_status!='live') as temp1;

##Correlation Coefficient for fundraisers length and pledge amount >> results -.04
select (avg(days * donors) - avg(days) * avg(donors)) / 
        (sqrt(avg(days * days) - avg(days) * avg(days)) * sqrt(avg(donors * donors) - avg(donors) * avg(donors)))
        as corr_coef
from (select datediff(deadline,launch_date) as days, fund.project_name, fund.launch_date, fund.deadline, fund.goal, fund.amt_pledged, fund.donors, fund.campaign_status, subc.project_name as sub_cat, cat.project_name as category from fundraisers fund
left join sub_category subc on fund.sub_category_id = subc.id
left join category cat on subc.id = cat.id
where (subc.project_name ='Tabletop Games') and fund.campaign_status!='live') as temp1;

# Average fundraisers length for successful Tabletop games
select campaign_status, avg(days)
from (select datediff(deadline,launch_date) as days, fund.project_name, fund.launch_date, fund.deadline, fund.goal, fund.amt_pledged, fund.donors, fund.campaign_status, subc.project_name as sub_cat, cat.project_name as category from fundraisers fund
left join sub_category subc on fund.sub_category_id = subc.id
left join category cat on subc.id = cat.id
where (subc.project_name ='Tabletop Games')) as temp1
group by campaign_status;

# Average fundraisers length for all Games
select campaign_status, avg(days)
from (select datediff(deadline,launch_date) as days, fund.project_name, fund.launch_date, fund.deadline, fund.goal, fund.amt_pledged, fund.donors, fund.campaign_status, subc.project_name as sub_cat, cat.project_name as category from fundraisers fund
left join sub_category subc on fund.sub_category_id = subc.id
left join category cat on subc.id = cat.id
where ((cat.project_name like '%game%') or (subc.project_name like '%game%')))as temp1
group by campaign_status;

# Categories and subcategories with the most pledges/donors

select * from fundraisers limit 5;
Select * from category;
Select * from sub_category;

# Merges all 3 tables together

select cat.project_name as category, count(fund.donors) as donors
from sub_category subc
left join category cat on subc.category_id=cat.id
left join fundraisers fund on subc.id = fund.sub_category_id
group by category
order by donors desc
limit 5;

select subc.project_name as subcategory, count(fund.donors) as donors
from sub_category subc
left join category cat on subc.category_id=cat.id
left join fundraisers fund on subc.id = fund.sub_category_id
group by subcategory
order by donors desc
limit 5;

# Categories and subcategories with the least pledges/donors

select cat.project_name as category, count(fund.donors) as donors
from sub_category subc
left join category cat on subc.category_id=cat.id
left join fundraisers fund on subc.id = fund.sub_category_id
group by category
order by donors
limit 3;

select subc.project_name as subcategory, count(fund.donors) as donors
from sub_category subc
left join category cat on subc.category_id=cat.id
left join fundraisers fund on subc.id = fund.sub_category_id
group by subcategory
order by donors
limit 5;

# Categories and subcategories that have raised the most money

select cat.project_name as category, count(fund.amt_pledged) as money_raised
from sub_category subc
left join category cat on subc.category_id=cat.id
left join fundraisers fund on subc.id = fund.sub_category_id
group by category
order by money_raised desc
limit 5;

select subc.project_name as subcategory, count(fund.amt_pledged) as money_raised
from sub_category subc
left join category cat on subc.category_id=cat.id
left join fundraisers fund on subc.id = fund.sub_category_id
group by subcategory
order by money_raised desc
limit 5;

# Categories and subcategories that have raised the least amount of money

select subc.project_name as subcategory, round(sum(fund.amt_pledged), 2) as money_raised
from sub_category subc
left join category cat on subc.category_id=cat.id
left join fundraisers fund on subc.id = fund.sub_category_id
group by subcategory
order by money_raised
limit 5;

select cat.project_name as category, round(sum(fund.amt_pledged), 2) as money_raised
from sub_category subc
left join category cat on subc.category_id=cat.id
left join fundraisers fund on subc.id = fund.sub_category_id
group by category
order by money_raised
limit 3;


# 4. Fundraisers stats from the fundraiser project that raised the most money
select project_name from sub_category where project_name like '%game%';

select fund.project_name, subc.project_name as subcategory,fund.amt_pledged, fund.donors from fundraisers fund
left join sub_category subc on fund.sub_category_id = subc.id
where subc.project_name ='Tabletop Games'
order by fund.amt_pledged desc
limit 5;

# 5. Countries with the most successful fundraiserss in terms of total dollars amt_pledged, and in terms of the number of donors
# Sorts the country by amount of money raised
select country.project_name, round(sum(fund.amt_pledged),2) as money_raised
from fundraisers fund
left join country on fund.country_id=country.id
group by country.project_name
order by money_raised desc
limit 3;

# List of countries sorted by the number of successful campaigns
select country.project_name, count(campaign_status) as successful_fundraisers
from fundraisers fund
left join country on fund.country_id=country.id
where fund.campaign_status = 'successful'
group by country.project_name
order by successful_fundraisers desc;

# Counts the number of amt_pledged projects each country has
select country.project_name, count(campaign_status) as amt_pledged_projects
from fundraisers fund
left join country on fund.country_id=country.id
where fund.donors != 0
group by country.project_name
order by amt_pledged_projects desc;

#GAMING SPECIFIC, shows the amount of money raised in each country in Gaming category.subcateogry
select country.project_name, round(sum(fund.amt_pledged), 2) as money_raised
from fundraisers fund
left join sub_category subc on fund.sub_category_id = subc.id
left join category cat on subc.id = cat.id
left join country on fund.country_id = country.id
where (cat.project_name like '%game%') or (subc.project_name like'%game%')
group by country.project_name
order by money_raised desc;

#Shows the number of successful GAMING fundraiserss in each country
select country.project_name, count(campaign_status) as successful_fundraisers
from fundraisers fund
left join sub_category subc on fund.sub_category_id = subc.id
left join category cat on subc.id = cat.id
left join country on fund.country_id = country.id
where ((cat.project_name like '%game%') or (subc.project_name like'%game%')) and (fund.campaign_status = 'successful')
group by country.project_name
order by successful_fundraisers desc;

# Shows the number of GAMING fundraiserss that received pledges, ordered by sum of pledge amount
select country.project_name, count(amt_pledged) as amt_pledged_projects
from fundraisers fund
left join sub_category subc on fund.sub_category_id = subc.id
left join category cat on subc.id = cat.id
left join country on fund.country_id = country.id
where ((cat.project_name like '%game%') or (subc.project_name like'%game%')) and (fund.amt_pledged != 0)
group by country.project_name
order by sum(amt_pledged) desc;

#Comparing money raised by number of days in the fundraiser campaign?
#convert the difference in deadline - launch_date to numerical days
select datediff(cast(deadline as date), cast(launch_date as date)) from fundraisers;

# Find descriptive stats about fundraisers day length
select max(days), min(days), avg(days)
from(select datediff(deadline, launch_date) as days, amt_pledged from fundraisers) as temp;


#Pearsons correlation formula for raw column data
select (avg(days * amt_pledged) - avg(days) * avg(amt_pledged)) / 
        (sqrt(avg(days * days) - avg(days) * avg(days)) * sqrt(avg(amt_pledged * amt_pledged) - avg(amt_pledged) * avg(amt_pledged)))
        as corr_coefficient
        from (select datediff(deadline, launch_date) as days, amt_pledged from fundraisers) as temp;

# averagefundraising by number of days
select days, round(avg(amt_pledged), 2)
from(select datediff(deadline, launch_date) as days, amt_pledged from fundraisers) as temp
group by days
order by days desc;

## Pearsons Correlation Coefficient of grouped average funding by days >> Result nearly 0
select (avg(days * amt_pledged) - avg(days) * avg(amt_pledged)) / 
        (sqrt(avg(days * days) - avg(days) * avg(days)) * sqrt(avg(amt_pledged * amt_pledged) - avg(amt_pledged) * avg(amt_pledged)))
        as corr_coef
from(select datediff(deadline, launch_date) as days, round(avg(amt_pledged),2) as amt_pledged from fundraisers
group by days
order by days desc) as temp;

#Proportional goal to day ratio
select campaign_status, round(avg(goal/days), 2) as avg_daily_goal
from (select datediff(deadline, launch_date) as days, goal, amt_pledged, campaign_status from fundraisers) as temp
group by campaign_status;
